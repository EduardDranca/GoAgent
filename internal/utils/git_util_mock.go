// Code generated by MockGen. DO NOT EDIT.
// Source: GoAgent/internal/agent (interfaces: GitUtil)
//
// Generated by go.uber.org/mock/mockgen.

package utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGitUtil is a mock of GitUtil interface.
type MockGitUtil struct {
	ctrl     *gomock.Controller
	recorder *MockGitUtilMockRecorder
}

// MockGitUtilMockRecorder is the mock recorder for MockGitUtil.
type MockGitUtilMockRecorder struct {
	mock *MockGitUtil
}

// NewMockGitUtil creates a new mock instance.
func NewMockGitUtil(ctrl *gomock.Controller) *MockGitUtil {
	mock := &MockGitUtil{ctrl: ctrl}
	mock.recorder = &MockGitUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitUtil) EXPECT() *MockGitUtilMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGitUtil) Add(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitUtilMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGitUtil)(nil).Add), arg0)
}

// Commit mocks base method.
func (m *MockGitUtil) Commit(arg0 string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitUtilMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGitUtil)(nil).Commit), arg0, arg1)
}

// LsTree mocks base method.
func (m *MockGitUtil) LsTree(rootDir string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LsTree", rootDir)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LsTree indicates an expected call of LsTree.
func (mr *MockGitUtilMockRecorder) LsTree(rootDir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LsTree", reflect.TypeOf((*MockGitUtil)(nil).LsTree), rootDir)
}

// ResetToHead mocks base method.
func (m *MockGitUtil) ResetToHead(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetToHead", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetToHead indicates an expected call of ResetToHead.
func (mr *MockGitUtilMockRecorder) ResetToHead(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetToHead", reflect.TypeOf((*MockGitUtil)(nil).ResetToHead), dir)
}
