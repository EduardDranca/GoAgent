// Code generated by MockGen. DO NOT EDIT.
// Source: programming/programming_service.go (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -destination=programming_service_mock.go programming/programming_service.go Service
//

package service

import (
	"github.com/EduardDranca/GoAgent/internal/agent/context"
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AskWithContext mocks base method.
func (m *MockService) AskWithContext(ctx context.ProgrammingAgentContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskWithContext", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskWithContext indicates an expected call of AskWithContext.
func (mr *MockServiceMockRecorder) AskWithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskWithContext", reflect.TypeOf((*MockService)(nil).AskWithContext), ctx)
}

// ImplementWithContext mocks base method.
func (m *MockService) ImplementWithContext(agentContext context.ProgrammingAgentContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImplementWithContext", agentContext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImplementWithContext indicates an expected call of ImplementWithContext.
func (mr *MockServiceMockRecorder) ImplementWithContext(agentContext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplementWithContext", reflect.TypeOf((*MockService)(nil).ImplementWithContext), agentContext)
}
